<script src="https://cdn.webrtc.ecl.ntt.com/skyway-1.1.18.js"></script>
<p id="notice"><%= notice %></p>

<h1>Users</h1>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Password</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @users.each do |user| %>
      <tr>
        <td><%= user.name %></td>
        <td><%= user.password %></td>
        <td><%= link_to 'Show', user %></td>
        <td><%= link_to 'Edit', edit_user_path(user) %></td>
        <td><%= link_to 'Destroy', user, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <% end %>
  </tbody>
</table>


<button id="speech_btn">SPEECH</button>
<button id="synthesis">Synthesis</button>

<div id="speech_out">

</div>

<div>
  <label>Name:</label>
  <input type="text" id="username">
</div>
<br>
<video id="my-video" width="400px" autoplay muted playsinline></video>
<p id="my-id"></p>
<textarea id="their-id"></textarea>
<button id="make-call">発信</button>
<video id="their-video" width="400px" autoplay muted playsinline></video>
   
<hr>
<div id="output"></div>

<script src="https://code.jquery.com/jquery-3.6.0.js" integrity="sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=" crossorigin="anonymous"></script>

<!-- The core Firebase JS SDK is always required and must be listed first -->
<script src="https://www.gstatic.com/firebasejs/8.3.0/firebase-app.js"></script>

<!-- TODO: Add SDKs for Firebase products that you want to use
    https://firebase.google.com/docs/web/setup#available-libraries -->
<script src="https://www.gstatic.com/firebasejs/8.3.3/firebase-analytics.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.3.0/firebase-auth.js"></script>  
<script src="https://www.gstatic.com/firebasejs/8.3.0/firebase-database.js"></script>
<script>

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
var firebaseConfig = {
    apiKey: "AIzaSyCrBDPXwTKsgiHbLbUsjxq3oSWrCkWvmtw",
    authDomain: "chatapp-1cc84.firebaseapp.com",
    databaseURL: "https://chatapp-1cc84-default-rtdb.firebaseio.com/",
    projectId: "chatapp-1cc84",
    storageBucket: "chatapp-1cc84.appspot.com",
    messagingSenderId: "302666486109",
    appId: "1:302666486109:web:58cbc9d7f6c942a440d8b4",
    measurementId: "G-NRLG6VXKYJ"
};
// Initialize Firebase
firebase.initializeApp(firebaseConfig);
firebase.analytics();



// firebase
var newPostRef = firebase.database();
let room = "room1"

const send = document.getElementById("send");
const username = document.getElementById("username");
const a_text = document.getElementById("msg_text");
const output = document.getElementById("output");

newPostRef.ref(room).on("child_added", function(data){
    const v = data.val();
    const k = data.key;
    let str = "";

    str += '<div class="name">' + v.username + '</div>';
    str += '<div class="r_text">' + v.a_text + '</div>';

    output.innerHTML = str;
});

// SpeechRecognition
var SpeechRecognition = SpeechRecognition || webkitSpeechRecognition

var speech = new SpeechRecognition();
speech.lang = "ja-JP";

document.querySelector("#speech_btn").addEventListener("click", function(e){
  speech.start();
});

speech.onresult = function(e){
  speech.stop();
  console.log(e.results);
  // Here !!!
  newPostRef.ref(room).push({
          username: username.value,
          a_text: e.results[0][0].transcript
      });
      a_text.value = "";
  // document.querySelector("#speech_out").innerHTML += "<p>You speak: " + e.results[0][0].transcript + "</p>";

};

speech.onend = () => {
  console.log("Speech Recognition is end.");
  speech.start();
}
// speechSynthesis
var synth = window.speechSynthesis;
// var btn = document.querySelector("#synthesis");
// var text = document.querySelector("#synth_test1").textContent;

// btn.onclick = function(e) {
//   var utter = new SpeechSynthesisUtterance(text);
//   utter.lang = 'en-US';
//   utter.voice = synth.getVoices()[1];
//   synth.speak(utter);
// }

// Skyway
let localStream;

// カメラ映像取得
navigator.mediaDevices.getUserMedia({video: true, audio: true})
    .then( stream => {
    // 成功時にvideo要素にカメラ映像をセットし、再生
    const videoElm = document.getElementById('my-video');
    videoElm.srcObject = stream;
    videoElm.play();
    // 着信時に相手にカメラ映像を返せるように、グローバル変数に保存しておく
    localStream = stream;
    }).catch( error => {
        // 失敗時にはエラーログを出力
        console.error('mediaDevice.getUserMedia() error:', error);
        return;
    });

//Peer作成
const peer = new Peer({
    key: 'fc167318-fb92-4eee-a264-2182291225b0',
    debug: 3
});

//PeerID取得
peer.on('open', () => {
    document.getElementById('my-id').textContent = peer.id;
});

// 発信処理
document.getElementById('make-call').onclick = () => {
    const theirID = document.getElementById('their-id').value;
    const mediaConnection = peer.call(theirID, localStream);
    setEventListener(mediaConnection);
  };
  
// イベントリスナを設置する関数
const setEventListener = mediaConnection => {
    mediaConnection.on('stream', stream => {
        // video要素にカメラ映像をセットして再生
        const videoElm = document.getElementById('their-video')
        videoElm.srcObject = stream;
        videoElm.play();
    });
}

//着信処理
peer.on('call', mediaConnection => {
    mediaConnection.answer(localStream);
    setEventListener(mediaConnection);
  });
</script>

<br>

<%= link_to 'New User', new_user_path %>
